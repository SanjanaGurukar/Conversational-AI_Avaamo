{"version":3,"sources":["Results.js","App.js","serviceWorker.js","index.js"],"names":["Results","props","id","className","JSON","stringify","this","words","pos","React","Component","newobj","App","state","wordNoccData","showResults","renderMyData","fetch","then","response","text","responseJson","getTop10Words","toLowerCase","result","output","catch","error","console","string","maxNum","wordsArray","split","wordOccurrences","i","length","Object","keys","reduce","acc","currKey","word","slice","occurences","splice","pop","setState","obj","resp","json","data","def","push","href","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qRAGqBA,G,8DACnB,WAAYC,GAAQ,uCACZA,G,qDAIN,OACI,yBAAKC,GAAG,UAAUC,UAAU,kBAC1B,2BAAIC,KAAKC,UAAUC,KAAKL,MAAMM,MAAM,KAAK,IACzC,2BAAIH,KAAKC,UAAUC,KAAKL,MAAMO,IAAI,KAAK,S,GATZC,IAAMC,YCCvCC,EAAS,GACQC,E,kDAEjB,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAEDY,MAAQ,CACXC,aAAc,KACdC,aAAa,GALE,E,iEAUfT,KAAKU,iB,qCAGM,IAAD,OACVC,MAAM,iEACDC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAkB,EAAKC,cAAcD,EAAaE,cAAc,OACrEL,MAAK,SAACM,GAAD,OAAY,EAAKC,OAAOD,MAC7BE,OAAM,SAACC,GACNC,QAAQD,MAAMA,Q,oCAIVE,EAAQC,GAGlB,IAFA,IAAIC,EAAaF,EAAOG,MAAM,MAC1BC,EAAkB,GACbC,EAAI,EAAGA,EAAIH,EAAWI,OAAQD,IACnCD,EAAgB,IAAIF,EAAWG,KAAQD,EAAgB,IAAIF,EAAWG,KAAO,GAAM,EAEvF,IAAIV,EAASY,OAAOC,KAAKJ,GAAiBK,QAAO,SAASC,EAAKC,GAC3D,IAAK,IAAIN,EAAI,EAAGA,EAAIJ,EAAQI,IAAK,CAC7B,IAAKK,EAAIL,IAAMM,EAAQL,OAAO,EAAG,CAC7BI,EAAIL,GAAK,CAAEO,KAAMD,EAAQE,MAAM,EAAGF,EAAQL,QAASQ,WAAYV,EAAgBO,IAC/E,MACG,GAAID,EAAIL,GAAGS,WAAaV,EAAgBO,IAAYA,EAAQL,OAAO,EAAG,CACzEI,EAAIK,OAAOV,EAAG,EAAG,CAAEO,KAAMD,EAAQE,MAAM,EAAGF,EAAQL,QAASQ,WAAYV,EAAgBO,KACnFD,EAAIJ,OAASL,GACbS,EAAIM,MACR,OAGR,OAAON,IACR,IAEH,OADAjC,KAAKwC,SAAS,CAAChC,aAAcU,IACtBA,I,6BAGFuB,GAEL,IAAI,IAAIb,EAAE,EAAGA,EAAE,GAAIA,IAChBjB,MAAM,uKAAD,OAAwK8B,EAAIb,GAAGO,OACpLvB,MAAK,SAAC8B,GAAD,OAAUA,EAAKC,UACpB/B,MAAK,SAASgC,GAEVA,EAAKC,IAAI,IAAMD,EAAKC,IAAI,GAAG3C,IAC1BG,EAAOyC,KAAKF,EAAKC,IAAI,GAAG3C,KAEvBG,EAAOyC,KAAK,kCAGrB,OAAOzC,I,gCAIPL,KAAKwC,SAAS,CAAE/B,aAAa,M,+BAGxB,IAAD,OACJ,OACA,yBAAKZ,UAAU,OACf,4BAAQA,UAAU,cAChB,0DACA,2CAAgB,uBAAGkD,KAAO,6BAAV,YAAhB,uCAAsG,6BAAtG,kFAEA,4BAAQlD,UAAU,SAASmD,QAAS,kBAAM,EAAKA,YAA/C,yBACA,6BACEhD,KAAKO,MAAME,YAAc,kBAAC,EAAD,CAASR,MAAOD,KAAKO,MAAMC,aAAcN,IAAKG,IAAY,W,GA9E9DF,IAAMC,WCOnB6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEd1C,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM0C,c","file":"static/js/main.6616f726.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Results.css'\r\n\r\nexport default class Results extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div id=\"results\" className=\"search-results\">\r\n          <p>{JSON.stringify(this.props.words,null,4)}</p>\r\n          <p>{JSON.stringify(this.props.pos,null,4)}</p>\r\n        </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Results from './Results';\r\n\r\nlet newobj = [];\r\nexport default class App extends React.Component  {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        wordNoccData: null,\r\n        showResults: false\r\n      };\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.renderMyData();\r\n    }\r\n\r\n    renderMyData(){\r\n        fetch('https://cors-anywhere.herokuapp.com/http://norvig.com/big.txt')\r\n            .then((response) => response.text())\r\n            .then((responseJson) => this.getTop10Words(responseJson.toLowerCase(),10))\r\n            .then((result) => this.output(result))\r\n            .catch((error) => {\r\n              console.error(error);\r\n            });\r\n    }\r\n\r\n    getTop10Words(string, maxNum) {\r\n        var wordsArray = string.split(/\\s/);\r\n        var wordOccurrences = {}\r\n        for (var i = 0; i < wordsArray.length; i++) {\r\n            wordOccurrences['_'+wordsArray[i]] = ( wordOccurrences['_'+wordsArray[i]] || 0 ) + 1;\r\n        }\r\n        var result = Object.keys(wordOccurrences).reduce(function(acc, currKey) {\r\n            for (var i = 0; i < maxNum; i++) {\r\n                if (!acc[i] && currKey.length>1) {\r\n                    acc[i] = { word: currKey.slice(1, currKey.length), occurences: wordOccurrences[currKey] };\r\n                    break;\r\n                } else if (acc[i].occurences < wordOccurrences[currKey] && currKey.length>1) {\r\n                    acc.splice(i, 0, { word: currKey.slice(1, currKey.length), occurences: wordOccurrences[currKey] });\r\n                    if (acc.length > maxNum)\r\n                        acc.pop();\r\n                    break;\r\n                }\r\n            }\r\n            return acc;\r\n        }, []);\r\n        this.setState({wordNoccData: result})\r\n        return result;\r\n      }\r\n      \r\n      output(obj){\r\n        \r\n        for(let i=0; i<10; i++){\r\n           fetch(`https://dictionary.yandex.net/api/v1/dicservice.json/lookup?key=dict.1.1.20170610T055246Z.0f11bdc42e7b693a.eefbde961e10106a4efa7d852287caa49ecc68cf&lang=en-en&text=${obj[i].word}`)\r\n          .then((resp) => resp.json()) // Transform the data into json\r\n          .then(function(data) {\r\n              \r\n            if(data.def[0] && data.def[0].pos){\r\n                newobj.push(data.def[0].pos)\r\n            }\r\n            else newobj.push(\"not found in the Dictionary\");\r\n          })\r\n        }\r\n        return newobj;\r\n      }\r\n    \r\n      onClick() {\r\n        this.setState({ showResults: true });\r\n      }\r\n\r\n    render(){\r\n        return(\r\n        <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <h1>Conversational AI Engineer</h1>\r\n          <p>In the given <a href = \"http://norvig.com/big.txt\">document</a> below are the list of top 10 words <br></br> along with \r\n          its number of occurences and its dictionary details in JSON format</p>\r\n          <button className=\"button\" onClick={() => this.onClick()}>Click me to find out!</button>\r\n          <br></br>\r\n          { this.state.showResults ? <Results words={this.state.wordNoccData} pos={newobj}/> : null }\r\n        </header>\r\n        </div>\r\n\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}